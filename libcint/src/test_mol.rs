//! Data and functions only for doc and unit testing.

use crate::prelude::*;
use num::{Complex, ToPrimitive};
use rayon::prelude::*;

/// Fingerprint of a vector.
///
/// # See Also
///
/// `pyscf.lib.fingerprint`
pub fn cint_fingerprint<T>(v: &T) -> T::Output
where
    T: FingerPrint + ?Sized,
{
    v.fingerprint()
}

pub use cint_fingerprint as cint_fp;

pub trait FingerPrint {
    type Output;
    /// Fingerprint of a vector.
    ///
    /// # See Also
    ///
    /// `pyscf.lib.fingerprint`
    fn fingerprint(&self) -> Self::Output;
}

#[duplicate::duplicate_item(
    T              VecT;
   [f64         ] [Vec<f64         >];
   [Complex<f64>] [Vec<Complex<f64>>];
   [f64         ] [[f64         ]   ];
   [Complex<f64>] [[Complex<f64>]   ];
)]
impl FingerPrint for VecT {
    type Output = T;

    fn fingerprint(&self) -> Self::Output {
        let arr = (0..self.len()).into_par_iter().map(|l| l.to_f64().unwrap().cos());
        arr.zip(self).map(|(a, &b)| a * b).sum()
    }
}

#[duplicate::duplicate_item(
    T              VecT;
   [f64         ] [Vec<[f64         ; N]>];
   [Complex<f64>] [Vec<[Complex<f64>; N]>];
   [f64         ] [[[f64         ; N]]   ];
   [Complex<f64>] [[[Complex<f64>; N]]   ];
)]
impl<const N: usize> FingerPrint for VecT {
    type Output = T;

    fn fingerprint(&self) -> Self::Output {
        let arr = (0..self.len() * N).into_par_iter().map(|l| l.to_f64().unwrap().cos());
        let vec = self.iter().flatten().copied().collect_vec();
        arr.zip(vec).map(|(a, b)| a * b).sum()
    }
}

#[duplicate::duplicate_item(
    T              VecT;
   [usize] [Vec<[usize; N]>];
   [usize] [[[usize; N]]   ];
   [c_int] [Vec<[c_int; N]>];
   [c_int] [[[c_int; N]]   ];
)]
impl<const N: usize> FingerPrint for VecT {
    type Output = f64;

    fn fingerprint(&self) -> Self::Output {
        let arr = (0..self.len() * N).into_par_iter().map(|l| l.to_f64().unwrap().cos());
        let vec = self.iter().flatten().copied().collect_vec();
        arr.zip(vec).map(|(a, b)| a * b.to_f64().unwrap()).sum()
    }
}

/// Initialize a water molecule with the def2-TZVP basis set.
///
/// PySCF equilvant:
///
/// ```python
/// mol = gto.Mole(atom="O; H 1 0.94; H 1 0.94 2 104.5", basis="def2-TZVP").build()
/// ```
#[rustfmt::skip]
pub fn init_h2o_def2_tzvp() -> CInt {
    let atm = vec![
       [ 8, 20,  1, 23,  0,  0],
       [ 1, 24,  1, 27,  0,  0],
       [ 1, 28,  1, 31,  0,  0],
    ];
    let bas = vec![
       [ 0,  0,  6,  1,  0, 32, 38,  0],
       [ 0,  0,  2,  1,  0, 44, 46,  0],
       [ 0,  0,  1,  1,  0, 48, 49,  0],
       [ 0,  0,  1,  1,  0, 50, 51,  0],
       [ 0,  0,  1,  1,  0, 52, 53,  0],
       [ 0,  1,  4,  1,  0, 54, 58,  0],
       [ 0,  1,  1,  1,  0, 62, 63,  0],
       [ 0,  1,  1,  1,  0, 64, 65,  0],
       [ 0,  2,  1,  1,  0, 66, 67,  0],
       [ 0,  2,  1,  1,  0, 68, 69,  0],
       [ 0,  3,  1,  1,  0, 70, 71,  0],
       [ 1,  0,  3,  1,  0, 72, 75,  0],
       [ 1,  0,  1,  1,  0, 78, 79,  0],
       [ 1,  0,  1,  1,  0, 80, 81,  0],
       [ 1,  1,  1,  1,  0, 82, 83,  0],
       [ 2,  0,  3,  1,  0, 72, 75,  0],
       [ 2,  0,  1,  1,  0, 78, 79,  0],
       [ 2,  0,  1,  1,  0, 80, 81,  0],
       [ 2,  1,  1,  1,  0, 82, 83,  0],
    ];
    let c_env = vec![
        0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,
        0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,
        0.0000000000000000e+00,  0.0000000000000000e+00,  1.7763425570911580e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00, -4.4476065664656128e-01,  0.0000000000000000e+00,  1.7197618551510188e+00,  0.0000000000000000e+00,  2.7032382631000000e+04,
        4.0523871392000001e+03,  9.2232722709999996e+02,  2.6124070989000001e+02,  8.5354641350999998e+01,  3.1035035245000000e+01,  3.0481181169845928e+00,  5.6914576328642115e+00,  9.7338835744432526e+00,  1.5238733819733028e+01,  2.0843228934131737e+01,  2.2391049059992991e+01,
        1.2260860728000001e+01,  4.9987076005000004e+00,  1.0568131135849375e+01,  3.3391469496791393e+00,  1.1703108158000000e+00,  2.8427648592056753e+00,  4.6474740994000002e-01,  1.4220922112658689e+00,  1.8504536357000001e-01,  7.1280983010446131e-01,  6.3274954801000000e+01,
        1.4627049379000001e+01,  4.4501223455999996e+00,  1.5275799646999999e+00,  6.2570323747894276e+00,  6.9268656235998423e+00,  6.0323599265415284e+00,  3.5035168827833356e+00,  5.2935117942999999e-01,  1.3172379939563448e+00,  1.7478421270000000e-01,  3.2969483673949351e-01,
        2.3140000000000001e+00,  1.1328313432935008e+01,  6.4500000000000002e-01,  1.2113199965714336e+00,  1.4279999999999999e+00,  4.3969226782656516e+00,  3.4061340999999999e+01,  5.1235746000000004e+00,  1.1646626000000000e+00,  9.0618446120248586e-01,  1.6354784928239057e+00,
        2.4145128304249659e+00,  3.2723041000000003e-01,  1.0930883523645869e+00,  1.0307241000000000e-01,  4.5959135109675275e-01,  8.0000000000000004e-01,  2.2072263710762661e+00
    ];

    CInt { atm, bas, ecpbas: vec![], env: c_env, cint_type: Spheric }
}

/// Initialize a water molecule with the def2-universal-jkfit basis set.
///
/// PySCF equilvant:
///
/// ```python
/// mol_jk = gto.Mole(atom="O; H 1 0.94; H 1 0.94 2 104.5", basis="def2-universal-jkfit").build()
/// ```
#[rustfmt::skip]
pub fn init_h2o_def2_jk() -> CInt {
    let atm = vec![
       [ 8, 20,  1, 23,  0,  0],
       [ 1, 24,  1, 27,  0,  0],
       [ 1, 28,  1, 31,  0,  0],
    ];
    let bas = vec![
       [  0,   0,   5,   1,   0,  32,  37,   0],
       [  0,   0,   1,   1,   0,  42,  43,   0],
       [  0,   0,   1,   1,   0,  44,  45,   0],
       [  0,   0,   1,   1,   0,  46,  47,   0],
       [  0,   0,   1,   1,   0,  48,  49,   0],
       [  0,   0,   1,   1,   0,  50,  51,   0],
       [  0,   0,   1,   1,   0,  52,  53,   0],
       [  0,   0,   1,   1,   0,  54,  55,   0],
       [  0,   0,   1,   1,   0,  56,  57,   0],
       [  0,   0,   1,   1,   0,  58,  59,   0],
       [  0,   1,   3,   1,   0,  60,  63,   0],
       [  0,   1,   1,   1,   0,  66,  67,   0],
       [  0,   1,   1,   1,   0,  68,  69,   0],
       [  0,   1,   1,   1,   0,  70,  71,   0],
       [  0,   1,   1,   1,   0,  72,  73,   0],
       [  0,   1,   1,   1,   0,  74,  75,   0],
       [  0,   1,   1,   1,   0,  76,  77,   0],
       [  0,   1,   1,   1,   0,  78,  79,   0],
       [  0,   2,   3,   1,   0,  80,  83,   0],
       [  0,   2,   1,   1,   0,  86,  87,   0],
       [  0,   2,   1,   1,   0,  88,  89,   0],
       [  0,   2,   1,   1,   0,  90,  91,   0],
       [  0,   3,   1,   1,   0,  92,  93,   0],
       [  0,   3,   1,   1,   0,  94,  95,   0],
       [  0,   4,   1,   1,   0,  96,  97,   0],
       [  1,   0,   3,   1,   0,  98, 101,   0],
       [  1,   0,   1,   1,   0, 104, 105,   0],
       [  1,   1,   1,   1,   0, 106, 107,   0],
       [  1,   1,   1,   1,   0, 108, 109,   0],
       [  1,   2,   1,   1,   0, 110, 111,   0],
       [  1,   2,   1,   1,   0, 112, 113,   0],
       [  2,   0,   3,   1,   0,  98, 101,   0],
       [  2,   0,   1,   1,   0, 104, 105,   0],
       [  2,   1,   1,   1,   0, 106, 107,   0],
       [  2,   1,   1,   1,   0, 108, 109,   0],
       [  2,   2,   1,   1,   0, 110, 111,   0],
       [  2,   2,   1,   1,   0, 112, 113,   0],
    ];
    let c_env = vec![
        0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,
        0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,
        0.0000000000000000e+00,  0.0000000000000000e+00,  1.7763425570911580e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00, -4.4476065664656128e-01,  0.0000000000000000e+00,  1.7197618551510188e+00,  0.0000000000000000e+00,  6.2528298110000003e+02,
        2.5393274180000000e+02,  1.0904929550000000e+02,  4.9423005600000003e+01,  2.3580521099999999e+01,  3.2414455397139847e+01,  1.7155105931409590e+01,  2.8105808072879487e+01,  1.5844173161692826e+01,  6.8663589412359674e+00,  1.1807759100000000e+01,  1.6093134366676669e+01,
        6.1827813999999996e+00,  9.9061053663319925e+00,  3.3709061000000000e+00,  6.2852855839814827e+00,  1.9042805000000000e+00,  4.0955592613074483e+00,  1.1085446999999999e+00,  2.7294800960022449e+00,  6.6098860000000004e-01,  1.8520832379494798e+00,  4.0108139999999998e-01,
        1.2733254396453531e+00,  2.4597690000000000e-01,  8.8244118092497081e-01,  1.5139390000000000e-01,  6.1319175524019442e-01,  7.7687483799999995e+01,  2.2415388400000001e+01,  9.8906463000000002e+00,  1.8414826890474902e+02,  8.3645924578134952e+01,  1.3702255383830460e+01,
        5.4848863000000003e+00,  2.4487470683244180e+01,  2.9732983000000002e+00,  1.1390230051430583e+01,  1.4735259999999999e+00,  4.7362175924204957e+00,  7.3603410000000002e-01,  1.9888718998267425e+00,  3.6974140000000000e-01,  8.4111813009041425e-01,  1.8637210000000001e-01,
        3.5724035808094229e-01,  9.4990599999999994e-02,  1.5384563586056391e-01,  3.7707107399999998e+01,  1.4775254300000000e+01,  5.8470899999999997e+00,  9.5658190772947790e+01,  7.4758898620505221e+01,  4.4552723496957100e+01,  2.3304364999999998e+00,  1.1469503415361299e+01,
        9.3282670000000001e-01,  2.3103675734198843e+00,  3.7392850000000000e-01,  4.6656201607423797e-01,  3.0293421999999999e+00,  2.3880538455678284e+01,  9.2484900000000003e-01,  1.6545112790169021e+00,  1.6934809000000000e+00,  5.5984130222538138e+00,  2.2068342999999999e+01,
        4.3905712000000001e+00,  1.0540787000000000e+00,  1.0916862887172785e+00,  2.4200346866055948e+00,  1.9292205612881017e+00,  2.7178740000000001e-01,  9.5101422610365860e-01,  1.8529979000000001e+00,  6.3070758141809531e+00,  3.8810339999999999e-01,  8.9365255590343295e-01,
        2.5579933000000001e+00,  1.3500608411472667e+01,  3.2926490000000003e-01,  3.7345123555619908e-01
    ];

    CInt { atm, bas, ecpbas: vec![], env: c_env, cint_type: Spheric }
}

/// Initialize Sb2Me4 with the cc-pVTZ basis set, which also includes ECP.
///
/// PySCF equivalent:
///
/// ```python
/// basis = {
///     "C": "cc-pVTZ",
///     "H": "cc-pVTZ",
///     "Sb": "cc-pVTZ-PP",
/// }
///
/// basis_ecp = {
///     "Sb": "cc-pVTZ-PP",
/// }
///
/// mol = gto.Mole(atom="""
/// Sb        -1.33937843      0.44597852     -1.27279684
/// Sb         1.33937843     -0.44597852     -1.27279684
/// C         -1.40429524      1.10441871      0.83468205
/// C         -2.16210130     -1.56132398     -0.84717555
/// C          2.16210130      1.56132398     -0.84717555
/// C          1.40429524     -1.10441871      0.83468205
/// H         -0.69918639      1.91987631      1.00872018
/// H         -1.16111477      0.29030616      1.51873028
/// H         -2.40124532      1.47235562      1.08516843
/// H         -2.02002046     -2.22909286     -1.69887295
/// H         -1.69052287     -2.01612927      0.02577778
/// H         -3.23450854     -1.49489801     -0.65423339
/// H          2.02002046      2.22909286     -1.69887295
/// H          3.23450854      1.49489801     -0.65423339
/// H          1.69052287      2.01612927      0.02577778
/// H          0.69918639     -1.91987631      1.00872018
/// H          2.40124532     -1.47235562      1.08516843
/// H          1.16111477     -0.29030616      1.51873028
/// """, basis=basis, ecp=basis_ecp).build()
/// ```
#[rustfmt::skip]
pub fn init_sb2me4_cc_pvtz() -> CInt {
    let atm = vec![
        [23, 20,  4, 23,  0,  0],
        [23, 24,  4, 27,  0,  0],
        [ 6, 28,  1, 31,  0,  0],
        [ 6, 32,  1, 35,  0,  0],
        [ 6, 36,  1, 39,  0,  0],
        [ 6, 40,  1, 43,  0,  0],
        [ 1, 44,  1, 47,  0,  0],
        [ 1, 48,  1, 51,  0,  0],
        [ 1, 52,  1, 55,  0,  0],
        [ 1, 56,  1, 59,  0,  0],
        [ 1, 60,  1, 63,  0,  0],
        [ 1, 64,  1, 67,  0,  0],
        [ 1, 68,  1, 71,  0,  0],
        [ 1, 72,  1, 75,  0,  0],
        [ 1, 76,  1, 79,  0,  0],
        [ 1, 80,  1, 83,  0,  0],
        [ 1, 84,  1, 87,  0,  0],
        [ 1, 88,  1, 91,  0,  0]
    ];
    let bas = vec![
        [  0,   0,   9,   2,   0, 152, 161,   0],
        [  0,   0,   1,   1,   0, 179, 180,   0],
        [  0,   0,   1,   1,   0, 181, 182,   0],
        [  0,   0,   1,   1,   0, 183, 184,   0],
        [  0,   1,   9,   2,   0, 185, 194,   0],
        [  0,   1,   1,   1,   0, 212, 213,   0],
        [  0,   1,   1,   1,   0, 214, 215,   0],
        [  0,   2,   7,   1,   0, 216, 223,   0],
        [  0,   2,   1,   1,   0, 230, 231,   0],
        [  0,   2,   1,   1,   0, 232, 233,   0],
        [  0,   3,   1,   1,   0, 234, 235,   0],
        [  1,   0,   9,   2,   0, 152, 161,   0],
        [  1,   0,   1,   1,   0, 179, 180,   0],
        [  1,   0,   1,   1,   0, 181, 182,   0],
        [  1,   0,   1,   1,   0, 183, 184,   0],
        [  1,   1,   9,   2,   0, 185, 194,   0],
        [  1,   1,   1,   1,   0, 212, 213,   0],
        [  1,   1,   1,   1,   0, 214, 215,   0],
        [  1,   2,   7,   1,   0, 216, 223,   0],
        [  1,   2,   1,   1,   0, 230, 231,   0],
        [  1,   2,   1,   1,   0, 232, 233,   0],
        [  1,   3,   1,   1,   0, 234, 235,   0],
        [  2,   0,   8,   2,   0,  92, 100,   0],
        [  2,   0,   1,   1,   0, 116, 117,   0],
        [  2,   0,   1,   1,   0, 118, 119,   0],
        [  2,   1,   3,   1,   0, 120, 123,   0],
        [  2,   1,   1,   1,   0, 126, 127,   0],
        [  2,   1,   1,   1,   0, 128, 129,   0],
        [  2,   2,   1,   1,   0, 130, 131,   0],
        [  2,   2,   1,   1,   0, 132, 133,   0],
        [  2,   3,   1,   1,   0, 134, 135,   0],
        [  3,   0,   8,   2,   0,  92, 100,   0],
        [  3,   0,   1,   1,   0, 116, 117,   0],
        [  3,   0,   1,   1,   0, 118, 119,   0],
        [  3,   1,   3,   1,   0, 120, 123,   0],
        [  3,   1,   1,   1,   0, 126, 127,   0],
        [  3,   1,   1,   1,   0, 128, 129,   0],
        [  3,   2,   1,   1,   0, 130, 131,   0],
        [  3,   2,   1,   1,   0, 132, 133,   0],
        [  3,   3,   1,   1,   0, 134, 135,   0],
        [  4,   0,   8,   2,   0,  92, 100,   0],
        [  4,   0,   1,   1,   0, 116, 117,   0],
        [  4,   0,   1,   1,   0, 118, 119,   0],
        [  4,   1,   3,   1,   0, 120, 123,   0],
        [  4,   1,   1,   1,   0, 126, 127,   0],
        [  4,   1,   1,   1,   0, 128, 129,   0],
        [  4,   2,   1,   1,   0, 130, 131,   0],
        [  4,   2,   1,   1,   0, 132, 133,   0],
        [  4,   3,   1,   1,   0, 134, 135,   0],
        [  5,   0,   8,   2,   0,  92, 100,   0],
        [  5,   0,   1,   1,   0, 116, 117,   0],
        [  5,   0,   1,   1,   0, 118, 119,   0],
        [  5,   1,   3,   1,   0, 120, 123,   0],
        [  5,   1,   1,   1,   0, 126, 127,   0],
        [  5,   1,   1,   1,   0, 128, 129,   0],
        [  5,   2,   1,   1,   0, 130, 131,   0],
        [  5,   2,   1,   1,   0, 132, 133,   0],
        [  5,   3,   1,   1,   0, 134, 135,   0],
        [  6,   0,   3,   1,   0, 136, 139,   0],
        [  6,   0,   1,   1,   0, 142, 143,   0],
        [  6,   0,   1,   1,   0, 144, 145,   0],
        [  6,   1,   1,   1,   0, 146, 147,   0],
        [  6,   1,   1,   1,   0, 148, 149,   0],
        [  6,   2,   1,   1,   0, 150, 151,   0],
        [  7,   0,   3,   1,   0, 136, 139,   0],
        [  7,   0,   1,   1,   0, 142, 143,   0],
        [  7,   0,   1,   1,   0, 144, 145,   0],
        [  7,   1,   1,   1,   0, 146, 147,   0],
        [  7,   1,   1,   1,   0, 148, 149,   0],
        [  7,   2,   1,   1,   0, 150, 151,   0],
        [  8,   0,   3,   1,   0, 136, 139,   0],
        [  8,   0,   1,   1,   0, 142, 143,   0],
        [  8,   0,   1,   1,   0, 144, 145,   0],
        [  8,   1,   1,   1,   0, 146, 147,   0],
        [  8,   1,   1,   1,   0, 148, 149,   0],
        [  8,   2,   1,   1,   0, 150, 151,   0],
        [  9,   0,   3,   1,   0, 136, 139,   0],
        [  9,   0,   1,   1,   0, 142, 143,   0],
        [  9,   0,   1,   1,   0, 144, 145,   0],
        [  9,   1,   1,   1,   0, 146, 147,   0],
        [  9,   1,   1,   1,   0, 148, 149,   0],
        [  9,   2,   1,   1,   0, 150, 151,   0],
        [ 10,   0,   3,   1,   0, 136, 139,   0],
        [ 10,   0,   1,   1,   0, 142, 143,   0],
        [ 10,   0,   1,   1,   0, 144, 145,   0],
        [ 10,   1,   1,   1,   0, 146, 147,   0],
        [ 10,   1,   1,   1,   0, 148, 149,   0],
        [ 10,   2,   1,   1,   0, 150, 151,   0],
        [ 11,   0,   3,   1,   0, 136, 139,   0],
        [ 11,   0,   1,   1,   0, 142, 143,   0],
        [ 11,   0,   1,   1,   0, 144, 145,   0],
        [ 11,   1,   1,   1,   0, 146, 147,   0],
        [ 11,   1,   1,   1,   0, 148, 149,   0],
        [ 11,   2,   1,   1,   0, 150, 151,   0],
        [ 12,   0,   3,   1,   0, 136, 139,   0],
        [ 12,   0,   1,   1,   0, 142, 143,   0],
        [ 12,   0,   1,   1,   0, 144, 145,   0],
        [ 12,   1,   1,   1,   0, 146, 147,   0],
        [ 12,   1,   1,   1,   0, 148, 149,   0],
        [ 12,   2,   1,   1,   0, 150, 151,   0],
        [ 13,   0,   3,   1,   0, 136, 139,   0],
        [ 13,   0,   1,   1,   0, 142, 143,   0],
        [ 13,   0,   1,   1,   0, 144, 145,   0],
        [ 13,   1,   1,   1,   0, 146, 147,   0],
        [ 13,   1,   1,   1,   0, 148, 149,   0],
        [ 13,   2,   1,   1,   0, 150, 151,   0],
        [ 14,   0,   3,   1,   0, 136, 139,   0],
        [ 14,   0,   1,   1,   0, 142, 143,   0],
        [ 14,   0,   1,   1,   0, 144, 145,   0],
        [ 14,   1,   1,   1,   0, 146, 147,   0],
        [ 14,   1,   1,   1,   0, 148, 149,   0],
        [ 14,   2,   1,   1,   0, 150, 151,   0],
        [ 15,   0,   3,   1,   0, 136, 139,   0],
        [ 15,   0,   1,   1,   0, 142, 143,   0],
        [ 15,   0,   1,   1,   0, 144, 145,   0],
        [ 15,   1,   1,   1,   0, 146, 147,   0],
        [ 15,   1,   1,   1,   0, 148, 149,   0],
        [ 15,   2,   1,   1,   0, 150, 151,   0],
        [ 16,   0,   3,   1,   0, 136, 139,   0],
        [ 16,   0,   1,   1,   0, 142, 143,   0],
        [ 16,   0,   1,   1,   0, 144, 145,   0],
        [ 16,   1,   1,   1,   0, 146, 147,   0],
        [ 16,   1,   1,   1,   0, 148, 149,   0],
        [ 16,   2,   1,   1,   0, 150, 151,   0],
        [ 17,   0,   3,   1,   0, 136, 139,   0],
        [ 17,   0,   1,   1,   0, 142, 143,   0],
        [ 17,   0,   1,   1,   0, 144, 145,   0],
        [ 17,   1,   1,   1,   0, 146, 147,   0],
        [ 17,   1,   1,   1,   0, 148, 149,   0],
        [ 17,   2,   1,   1,   0, 150, 151,   0],
    ];
    let env = vec![
        0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,
        0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00, -2.5310584098499369e+00,  8.4277726023886190e-01,
       -2.4052374398118572e+00,  0.0000000000000000e+00,  2.5310584098499369e+00, -8.4277726023886190e-01, -2.4052374398118572e+00,  0.0000000000000000e+00, -2.6537334016303631e+00,  2.0870488887454450e+00,  1.5773204755905210e+00,  0.0000000000000000e+00, -4.0857793105660818e+00,
       -2.9504747139158982e+00, -1.6009297689277748e+00,  0.0000000000000000e+00,  4.0857793105660818e+00,  2.9504747139158982e+00, -1.6009297689277748e+00,  0.0000000000000000e+00,  2.6537334016303631e+00, -2.0870488887454450e+00,  1.5773204755905210e+00,  0.0000000000000000e+00,
       -1.3212707871233360e+00,  3.6280404189405715e+00,  1.9062048765219717e+00,  0.0000000000000000e+00, -2.1941889144873530e+00,  5.4859913467416477e-01,  2.8699842862840113e+00,  0.0000000000000000e+00, -4.5376960126935924e+00,  2.7823488797641889e+00,  2.0506711317242523e+00,
        0.0000000000000000e+00, -3.8172854354179337e+00, -4.2123750116234504e+00, -3.2104045959319141e+00,  0.0000000000000000e+00, -3.1946252316137058e+00, -3.8099321520192873e+00,  4.8712944299290760e-02,  0.0000000000000000e+00, -6.1123352881667969e+00, -2.8249478230573231e+00,
       -1.2363219286457627e+00,  0.0000000000000000e+00,  3.8172854354179337e+00,  4.2123750116234504e+00, -3.2104045959319141e+00,  0.0000000000000000e+00,  6.1123352881667969e+00,  2.8249478230573231e+00, -1.2363219286457627e+00,  0.0000000000000000e+00,  3.1946252316137058e+00,
        3.8099321520192873e+00,  4.8712944299290760e-02,  0.0000000000000000e+00,  1.3212707871233360e+00, -3.6280404189405715e+00,  1.9062048765219717e+00,  0.0000000000000000e+00,  4.5376960126935924e+00, -2.7823488797641889e+00,  2.0506711317242523e+00,  0.0000000000000000e+00,
        2.1941889144873530e+00, -5.4859913467416477e-01,  2.8699842862840113e+00,  0.0000000000000000e+00,  8.2360000000000000e+03,  1.2350000000000000e+03,  2.8080000000000001e+02,  7.9269999999999996e+01,  2.5590000000000000e+01,  8.9969999999999999e+00,  3.3190000000000000e+00,
        3.6430000000000001e-01,  1.1848029579962485e+00,  2.2087420958467954e+00,  3.7331632411699647e+00,  5.6121671877500141e+00,  6.8951958275334579e+00,  5.8240951549970470e+00,  2.1966344085647300e+00, -1.0871266277536597e-02, -4.2896967016358145e-01, -8.0316657085341603e-01,
       -1.3674598077680664e+00, -2.1152523937715104e+00, -2.7857129910619318e+00, -2.8945342343698295e+00, -1.8393465668046673e+00,  1.2326872957230348e+00,  9.0590000000000004e-01,  2.3459849353409776e+00,  1.2850000000000000e-01,  5.4224102193672574e-01,  1.8710000000000001e+01,
        4.1330000000000000e+00,  1.2000000000000000e+00,  4.4757272131523500e+00,  4.1962787569292566e+00,  2.9880004587458688e+00,  3.8269999999999998e-01,  8.7812728226333803e-01,  1.2089999999999999e-01,  2.0797793826116898e-01,  1.0970000000000000e+00,  3.0682517054988114e+00,
        3.1800000000000000e-01,  3.5137984426073676e-01,  7.6100000000000001e-01,  1.0669052186285761e+00,  3.3869999999999997e+01,  5.0949999999999998e+00,  1.1590000000000000e+00,  9.0433451868360204e-01,  1.6310045469892753e+00,  2.4049152515787453e+00,  3.2579999999999998e-01,
        1.0895027586222563e+00,  1.0270000000000000e-01,  4.5834537873517578e-01,  1.4070000000000000e+00,  4.4704579516382497e+00,  3.8800000000000001e-01,  8.9335495287819022e-01,  1.0569999999999999e+00,  2.8751507053870005e+00,  3.9283299999999999e+03,  5.9388900000000001e+02,
        1.2018500000000000e+02,  2.9513999999999999e+01,  1.8442200000000000e+01,  7.4757100000000003e+00,  1.9513600000000000e+00,  9.5225800000000005e-01,  6.2628000000000003e-02,  1.9544709595924911e-01,  2.8647133392758989e-01,  2.6190471400047577e-01, -1.7916282587364325e+00,
        5.5382888483654202e+00, -8.5376598588928054e+00,  3.6582965262119855e+00,  1.1620533758494662e+00,  4.3612003982480184e-04,  1.1515799228178134e-01,  1.9273880074241864e-01,  1.1916088405278458e-01, -7.4477756790617899e-01,  2.7650294257257038e+00, -4.9997093866853630e+00,
        2.9763818989686723e+00,  1.3847811832453061e+00, -7.8460941083611332e-02,  2.8796800000000000e-01,  9.9316909484575389e-01,  1.3639599999999999e-01,  5.6704333470743129e-01,  7.6399999999999996e-02,  3.6714282320361952e-01,  2.1047100000000000e+02,  1.6141400000000001e+01,
        9.8253000000000004e+00,  2.7526700000000002e+00,  1.4214800000000001e+00,  7.1624600000000005e-01,  3.2020500000000002e-01,  1.3508800000000001e-01,  5.5129999999999998e-02,  6.1741707840400217e-01,  7.5419706251802783e+00, -1.4054534207368150e+01,  5.0028472108871673e+00,
        2.2671763998137116e+00,  3.2024468177732668e-01,  8.4106078513693713e-03,  6.6659115857283429e-05, -3.8966318479955603e-07, -2.3854751269840505e-01, -2.0539493937326574e+00,  4.0933630671900234e+00, -1.8063044732711104e+00, -8.3385682701422426e-01, -1.0278709223691394e-01,
        2.5178559489422342e-01,  1.3579298417804664e-01,  1.8574698890638713e-02,  4.3319999999999997e-01,  1.0252858235111464e+00,  7.3719999999999994e-02,  1.1206398210747678e-01,  1.3577500000000001e+02,  3.8774600000000000e+01,  1.3492200000000000e+01,  5.0832699999999997e+00,
        2.7895799999999999e+00,  1.4615899999999999e+00,  7.4084499999999998e-01,  5.6516498133058448e+00,  4.9964128513970758e+00, -2.9757646867148213e+00,  5.4498342264143833e+00,  5.2857127512001547e+00,  2.0548519457143102e+00,  4.2419761361097486e-01,  3.5313000000000000e-01,
        4.2209962009884061e-01,  1.3930000000000001e-01,  8.2878873561841732e-02,  3.2440000000000002e-01,  1.5665427974203575e-01,  1.6330864999999999e+01,  8.5565420000000003e+00,  2.8107158099999998e+02,  6.1716603999999997e+01,  1.4470337000000001e+01,  1.3816193999999999e+01,
        8.4249240000000007e+00,  8.0927279999999993e+00,  6.7457380000000001e+01,  1.3493350300000000e+02,  1.4716343999999999e+01,  2.9518512000000001e+01,  1.5146319000000000e+01,  1.4886331000000000e+01,  5.9082670000000004e+00,  5.5943220000000000e+00,  5.3143465999999997e+01,
        3.5447814999999999e+01,  9.1792230000000004e+00,  1.3240252999999999e+01,  1.4449294999999999e+01,  1.4444978000000001e+01, -2.0296137999999999e+01, -1.5366801000000001e+01]
    ;
    let ecpbas = vec![
        [  0,   0,   2,   2,   0, 236, 238,   0],
        [  0,   1,   4,   2,   0, 240, 244,   0],
        [  0,   2,   4,   2,   0, 248, 252,   0],
        [  0,   3,   2,   2,   0, 256, 258,   0],
        [  1,   0,   2,   2,   0, 236, 238,   0],
        [  1,   1,   4,   2,   0, 240, 244,   0],
        [  1,   2,   4,   2,   0, 248, 252,   0],
        [  1,   3,   2,   2,   0, 256, 258,   0],
    ];

    CInt { atm, bas, ecpbas, env, cint_type: Spheric }
}
