//! CInt data only for doc and unit testing.

use crate::prelude::*;
use num::{Complex, FromPrimitive};
use rayon::prelude::*;

/// Fingerprint of a vector.
///
/// # See Also
///
/// `pyscf.lib.fingerprint`
pub fn cint_fingerprint<T>(v: &T) -> T::Output
where
    T: FingerPrint,
{
    v.fingerprint()
}

pub trait FingerPrint {
    type Output;
    /// Fingerprint of a vector.
    ///
    /// # See Also
    ///
    /// `pyscf.lib.fingerprint`
    fn fingerprint(&self) -> Self::Output;
}

#[duplicate::duplicate_item(
    T              VecT;
   [f64         ] [Vec<f64         >];
   [Complex<f64>] [Vec<Complex<f64>>];
   [f64         ] [[f64         ]   ];
   [Complex<f64>] [[Complex<f64>]   ];
)]
impl FingerPrint for VecT {
    type Output = T;

    fn fingerprint(&self) -> Self::Output {
        let arr = (0..self.len()).into_par_iter().map(|l| f64::from_usize(l).unwrap().cos());
        arr.zip(self).map(|(a, &b)| a * b).sum()
    }
}

#[duplicate::duplicate_item(
    T              VecT;
   [f64         ] [Vec<[f64         ; N]>];
   [Complex<f64>] [Vec<[Complex<f64>; N]>];
   [f64         ] [[[f64         ; N]]   ];
   [Complex<f64>] [[[Complex<f64>; N]]   ];
)]
impl<const N: usize> FingerPrint for VecT {
    type Output = T;

    fn fingerprint(&self) -> Self::Output {
        let arr = (0..self.len() * N).into_par_iter().map(|l| f64::from_usize(l).unwrap().cos());
        arr.zip(self.iter().flatten().copied().collect::<Vec<T>>()).map(|(a, b)| a * b).sum()
    }
}

#[duplicate::duplicate_item(
    T              VecT;
   [usize] [Vec<[usize; N]>];
   [usize] [[[usize; N]]   ];
)]
impl<const N: usize> FingerPrint for VecT {
    type Output = f64;

    fn fingerprint(&self) -> Self::Output {
        let arr = (0..self.len() * N).into_par_iter().map(|l| f64::from_usize(l).unwrap().cos());
        arr.zip(self.iter().flatten().copied().collect::<Vec<T>>())
            .map(|(a, b)| a * f64::from_usize(b).unwrap())
            .sum()
    }
}

/// Initialize a water molecule with the def2-TZVP basis set.
///
/// PySCF equilvant:
///
/// ```python
/// mol = gto.Mole(atom="O; H 1 0.94; H 1 0.94 2 104.5", basis="def2-TZVP").build()
/// ```
#[rustfmt::skip]
pub fn init_h2o_def2_tzvp() -> CInt {
    let atm = vec![
        [8, 20, 1, 23, 0, 0],
        [1, 24, 1, 27, 0, 0],
        [1, 28, 1, 31, 0, 0]
    ];
    let bas = vec![
        [0, 0, 6, 1, 0, 44, 50, 0],
        [0, 0, 2, 1, 0, 56, 58, 0],
        [0, 0, 1, 1, 0, 60, 61, 0],
        [0, 0, 1, 1, 0, 62, 63, 0],
        [0, 0, 1, 1, 0, 64, 65, 0],
        [0, 1, 4, 1, 0, 66, 70, 0],
        [0, 1, 1, 1, 0, 74, 75, 0],
        [0, 1, 1, 1, 0, 76, 77, 0],
        [0, 2, 1, 1, 0, 78, 79, 0],
        [0, 2, 1, 1, 0, 80, 81, 0],
        [0, 3, 1, 1, 0, 82, 83, 0],
        [1, 0, 3, 1, 0, 32, 35, 0],
        [1, 0, 1, 1, 0, 38, 39, 0],
        [1, 0, 1, 1, 0, 40, 41, 0],
        [1, 1, 1, 1, 0, 42, 43, 0],
        [2, 0, 3, 1, 0, 32, 35, 0],
        [2, 0, 1, 1, 0, 38, 39, 0],
        [2, 0, 1, 1, 0, 40, 41, 0],
        [2, 1, 1, 1, 0, 42, 43, 0],
    ];
    let c_env = vec![
        0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,
        0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,
        0.0000000000000000e+00,  0.0000000000000000e+00,  1.7763425570911580e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00, -4.4476065664656128e-01,  0.0000000000000000e+00,  1.7197618551510188e+00,  0.0000000000000000e+00,  3.4061340999999999e+01,
        5.1235746000000004e+00,  1.1646626000000000e+00,  9.0618446120248586e-01,  1.6354784928239057e+00,  2.4145128304249659e+00,  3.2723041000000003e-01,  1.0930883523645869e+00,  1.0307241000000000e-01,  4.5959135109675275e-01,  8.0000000000000004e-01,  2.2072263710762661e+00,
        2.7032382631000000e+04,  4.0523871392000001e+03,  9.2232722709999996e+02,  2.6124070989000001e+02,  8.5354641350999998e+01,  3.1035035245000000e+01,  3.0481181169845928e+00,  5.6914576328642115e+00,  9.7338835744432526e+00,  1.5238733819733028e+01,  2.0843228934131737e+01,
        2.2391049059992991e+01,  1.2260860728000001e+01,  4.9987076005000004e+00,  1.0568131135849375e+01,  3.3391469496791393e+00,  1.1703108158000000e+00,  2.8427648592056753e+00,  4.6474740994000002e-01,  1.4220922112658689e+00,  1.8504536357000001e-01,  7.1280983010446131e-01,
        6.3274954801000000e+01,  1.4627049379000001e+01,  4.4501223455999996e+00,  1.5275799646999999e+00,  6.2570323747894276e+00,  6.9268656235998423e+00,  6.0323599265415284e+00,  3.5035168827833356e+00,  5.2935117942999999e-01,  1.3172379939563448e+00,  1.7478421270000000e-01,
        3.2969483673949351e-01,  2.3140000000000001e+00,  1.1328313432935008e+01,  6.4500000000000002e-01,  1.2113199965714336e+00,  1.4279999999999999e+00,  4.3969226782656516e+00
    ];

    CInt { atm, bas, ecpbas: vec![], env: c_env, cint_type: Spheric }
}

/// Initialize Sb2Me4 with the cc-pVTZ basis set, which also includes ECP.
///
/// PySCF equivalent:
///
/// ```python
/// basis = {
///     "C": "cc-pVTZ",
///     "H": "cc-pVTZ",
///     "Sb": "cc-pVTZ-PP",
/// }
///
/// basis_ecp = {
///     "Sb": "cc-pVTZ-PP",
/// }
///
/// mol = gto.Mole(atom="""
/// Sb        -1.33937843      0.44597852     -1.27279684
/// Sb         1.33937843     -0.44597852     -1.27279684
/// C         -1.40429524      1.10441871      0.83468205
/// C         -2.16210130     -1.56132398     -0.84717555
/// C          2.16210130      1.56132398     -0.84717555
/// C          1.40429524     -1.10441871      0.83468205
/// H         -0.69918639      1.91987631      1.00872018
/// H         -1.16111477      0.29030616      1.51873028
/// H         -2.40124532      1.47235562      1.08516843
/// H         -2.02002046     -2.22909286     -1.69887295
/// H         -1.69052287     -2.01612927      0.02577778
/// H         -3.23450854     -1.49489801     -0.65423339
/// H          2.02002046      2.22909286     -1.69887295
/// H          3.23450854      1.49489801     -0.65423339
/// H          1.69052287      2.01612927      0.02577778
/// H          0.69918639     -1.91987631      1.00872018
/// H          2.40124532     -1.47235562      1.08516843
/// H          1.16111477     -0.29030616      1.51873028
/// """, basis=basis, ecp=basis_ecp).build()
/// ```
#[rustfmt::skip]
pub fn init_sb2me4_cc_pvtz() -> CInt {
    let atm = vec![
        [23, 20,  4, 23,  0,  0],
        [23, 24,  4, 27,  0,  0],
        [ 6, 28,  1, 31,  0,  0],
        [ 6, 32,  1, 35,  0,  0],
        [ 6, 36,  1, 39,  0,  0],
        [ 6, 40,  1, 43,  0,  0],
        [ 1, 44,  1, 47,  0,  0],
        [ 1, 48,  1, 51,  0,  0],
        [ 1, 52,  1, 55,  0,  0],
        [ 1, 56,  1, 59,  0,  0],
        [ 1, 60,  1, 63,  0,  0],
        [ 1, 64,  1, 67,  0,  0],
        [ 1, 68,  1, 71,  0,  0],
        [ 1, 72,  1, 75,  0,  0],
        [ 1, 76,  1, 79,  0,  0],
        [ 1, 80,  1, 83,  0,  0],
        [ 1, 84,  1, 87,  0,  0],
        [ 1, 88,  1, 91,  0,  0]
    ];
    let bas = vec![
        [  0,   0,   9,   2,   0, 152, 161,   0],
        [  0,   0,   1,   1,   0, 179, 180,   0],
        [  0,   0,   1,   1,   0, 181, 182,   0],
        [  0,   0,   1,   1,   0, 183, 184,   0],
        [  0,   1,   9,   2,   0, 185, 194,   0],
        [  0,   1,   1,   1,   0, 212, 213,   0],
        [  0,   1,   1,   1,   0, 214, 215,   0],
        [  0,   2,   7,   1,   0, 216, 223,   0],
        [  0,   2,   1,   1,   0, 230, 231,   0],
        [  0,   2,   1,   1,   0, 232, 233,   0],
        [  0,   3,   1,   1,   0, 234, 235,   0],
        [  1,   0,   9,   2,   0, 152, 161,   0],
        [  1,   0,   1,   1,   0, 179, 180,   0],
        [  1,   0,   1,   1,   0, 181, 182,   0],
        [  1,   0,   1,   1,   0, 183, 184,   0],
        [  1,   1,   9,   2,   0, 185, 194,   0],
        [  1,   1,   1,   1,   0, 212, 213,   0],
        [  1,   1,   1,   1,   0, 214, 215,   0],
        [  1,   2,   7,   1,   0, 216, 223,   0],
        [  1,   2,   1,   1,   0, 230, 231,   0],
        [  1,   2,   1,   1,   0, 232, 233,   0],
        [  1,   3,   1,   1,   0, 234, 235,   0],
        [  2,   0,   8,   2,   0,  92, 100,   0],
        [  2,   0,   1,   1,   0, 116, 117,   0],
        [  2,   0,   1,   1,   0, 118, 119,   0],
        [  2,   1,   3,   1,   0, 120, 123,   0],
        [  2,   1,   1,   1,   0, 126, 127,   0],
        [  2,   1,   1,   1,   0, 128, 129,   0],
        [  2,   2,   1,   1,   0, 130, 131,   0],
        [  2,   2,   1,   1,   0, 132, 133,   0],
        [  2,   3,   1,   1,   0, 134, 135,   0],
        [  3,   0,   8,   2,   0,  92, 100,   0],
        [  3,   0,   1,   1,   0, 116, 117,   0],
        [  3,   0,   1,   1,   0, 118, 119,   0],
        [  3,   1,   3,   1,   0, 120, 123,   0],
        [  3,   1,   1,   1,   0, 126, 127,   0],
        [  3,   1,   1,   1,   0, 128, 129,   0],
        [  3,   2,   1,   1,   0, 130, 131,   0],
        [  3,   2,   1,   1,   0, 132, 133,   0],
        [  3,   3,   1,   1,   0, 134, 135,   0],
        [  4,   0,   8,   2,   0,  92, 100,   0],
        [  4,   0,   1,   1,   0, 116, 117,   0],
        [  4,   0,   1,   1,   0, 118, 119,   0],
        [  4,   1,   3,   1,   0, 120, 123,   0],
        [  4,   1,   1,   1,   0, 126, 127,   0],
        [  4,   1,   1,   1,   0, 128, 129,   0],
        [  4,   2,   1,   1,   0, 130, 131,   0],
        [  4,   2,   1,   1,   0, 132, 133,   0],
        [  4,   3,   1,   1,   0, 134, 135,   0],
        [  5,   0,   8,   2,   0,  92, 100,   0],
        [  5,   0,   1,   1,   0, 116, 117,   0],
        [  5,   0,   1,   1,   0, 118, 119,   0],
        [  5,   1,   3,   1,   0, 120, 123,   0],
        [  5,   1,   1,   1,   0, 126, 127,   0],
        [  5,   1,   1,   1,   0, 128, 129,   0],
        [  5,   2,   1,   1,   0, 130, 131,   0],
        [  5,   2,   1,   1,   0, 132, 133,   0],
        [  5,   3,   1,   1,   0, 134, 135,   0],
        [  6,   0,   3,   1,   0, 136, 139,   0],
        [  6,   0,   1,   1,   0, 142, 143,   0],
        [  6,   0,   1,   1,   0, 144, 145,   0],
        [  6,   1,   1,   1,   0, 146, 147,   0],
        [  6,   1,   1,   1,   0, 148, 149,   0],
        [  6,   2,   1,   1,   0, 150, 151,   0],
        [  7,   0,   3,   1,   0, 136, 139,   0],
        [  7,   0,   1,   1,   0, 142, 143,   0],
        [  7,   0,   1,   1,   0, 144, 145,   0],
        [  7,   1,   1,   1,   0, 146, 147,   0],
        [  7,   1,   1,   1,   0, 148, 149,   0],
        [  7,   2,   1,   1,   0, 150, 151,   0],
        [  8,   0,   3,   1,   0, 136, 139,   0],
        [  8,   0,   1,   1,   0, 142, 143,   0],
        [  8,   0,   1,   1,   0, 144, 145,   0],
        [  8,   1,   1,   1,   0, 146, 147,   0],
        [  8,   1,   1,   1,   0, 148, 149,   0],
        [  8,   2,   1,   1,   0, 150, 151,   0],
        [  9,   0,   3,   1,   0, 136, 139,   0],
        [  9,   0,   1,   1,   0, 142, 143,   0],
        [  9,   0,   1,   1,   0, 144, 145,   0],
        [  9,   1,   1,   1,   0, 146, 147,   0],
        [  9,   1,   1,   1,   0, 148, 149,   0],
        [  9,   2,   1,   1,   0, 150, 151,   0],
        [ 10,   0,   3,   1,   0, 136, 139,   0],
        [ 10,   0,   1,   1,   0, 142, 143,   0],
        [ 10,   0,   1,   1,   0, 144, 145,   0],
        [ 10,   1,   1,   1,   0, 146, 147,   0],
        [ 10,   1,   1,   1,   0, 148, 149,   0],
        [ 10,   2,   1,   1,   0, 150, 151,   0],
        [ 11,   0,   3,   1,   0, 136, 139,   0],
        [ 11,   0,   1,   1,   0, 142, 143,   0],
        [ 11,   0,   1,   1,   0, 144, 145,   0],
        [ 11,   1,   1,   1,   0, 146, 147,   0],
        [ 11,   1,   1,   1,   0, 148, 149,   0],
        [ 11,   2,   1,   1,   0, 150, 151,   0],
        [ 12,   0,   3,   1,   0, 136, 139,   0],
        [ 12,   0,   1,   1,   0, 142, 143,   0],
        [ 12,   0,   1,   1,   0, 144, 145,   0],
        [ 12,   1,   1,   1,   0, 146, 147,   0],
        [ 12,   1,   1,   1,   0, 148, 149,   0],
        [ 12,   2,   1,   1,   0, 150, 151,   0],
        [ 13,   0,   3,   1,   0, 136, 139,   0],
        [ 13,   0,   1,   1,   0, 142, 143,   0],
        [ 13,   0,   1,   1,   0, 144, 145,   0],
        [ 13,   1,   1,   1,   0, 146, 147,   0],
        [ 13,   1,   1,   1,   0, 148, 149,   0],
        [ 13,   2,   1,   1,   0, 150, 151,   0],
        [ 14,   0,   3,   1,   0, 136, 139,   0],
        [ 14,   0,   1,   1,   0, 142, 143,   0],
        [ 14,   0,   1,   1,   0, 144, 145,   0],
        [ 14,   1,   1,   1,   0, 146, 147,   0],
        [ 14,   1,   1,   1,   0, 148, 149,   0],
        [ 14,   2,   1,   1,   0, 150, 151,   0],
        [ 15,   0,   3,   1,   0, 136, 139,   0],
        [ 15,   0,   1,   1,   0, 142, 143,   0],
        [ 15,   0,   1,   1,   0, 144, 145,   0],
        [ 15,   1,   1,   1,   0, 146, 147,   0],
        [ 15,   1,   1,   1,   0, 148, 149,   0],
        [ 15,   2,   1,   1,   0, 150, 151,   0],
        [ 16,   0,   3,   1,   0, 136, 139,   0],
        [ 16,   0,   1,   1,   0, 142, 143,   0],
        [ 16,   0,   1,   1,   0, 144, 145,   0],
        [ 16,   1,   1,   1,   0, 146, 147,   0],
        [ 16,   1,   1,   1,   0, 148, 149,   0],
        [ 16,   2,   1,   1,   0, 150, 151,   0],
        [ 17,   0,   3,   1,   0, 136, 139,   0],
        [ 17,   0,   1,   1,   0, 142, 143,   0],
        [ 17,   0,   1,   1,   0, 144, 145,   0],
        [ 17,   1,   1,   1,   0, 146, 147,   0],
        [ 17,   1,   1,   1,   0, 148, 149,   0],
        [ 17,   2,   1,   1,   0, 150, 151,   0],
    ];
    let env = vec![
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
       -2.53105841e+00,  8.42777260e-01, -2.40523744e+00,  0.00000000e+00,
        2.53105841e+00, -8.42777260e-01, -2.40523744e+00,  0.00000000e+00,
       -2.65373340e+00,  2.08704889e+00,  1.57732048e+00,  0.00000000e+00,
       -4.08577931e+00, -2.95047471e+00, -1.60092977e+00,  0.00000000e+00,
        4.08577931e+00,  2.95047471e+00, -1.60092977e+00,  0.00000000e+00,
        2.65373340e+00, -2.08704889e+00,  1.57732048e+00,  0.00000000e+00,
       -1.32127079e+00,  3.62804042e+00,  1.90620488e+00,  0.00000000e+00,
       -2.19418891e+00,  5.48599135e-01,  2.86998429e+00,  0.00000000e+00,
       -4.53769601e+00,  2.78234888e+00,  2.05067113e+00,  0.00000000e+00,
       -3.81728544e+00, -4.21237501e+00, -3.21040460e+00,  0.00000000e+00,
       -3.19462523e+00, -3.80993215e+00,  4.87129443e-02,  0.00000000e+00,
       -6.11233529e+00, -2.82494782e+00, -1.23632193e+00,  0.00000000e+00,
        3.81728544e+00,  4.21237501e+00, -3.21040460e+00,  0.00000000e+00,
        6.11233529e+00,  2.82494782e+00, -1.23632193e+00,  0.00000000e+00,
        3.19462523e+00,  3.80993215e+00,  4.87129443e-02,  0.00000000e+00,
        1.32127079e+00, -3.62804042e+00,  1.90620488e+00,  0.00000000e+00,
        4.53769601e+00, -2.78234888e+00,  2.05067113e+00,  0.00000000e+00,
        2.19418891e+00, -5.48599135e-01,  2.86998429e+00,  0.00000000e+00,
        8.23600000e+03,  1.23500000e+03,  2.80800000e+02,  7.92700000e+01,
        2.55900000e+01,  8.99700000e+00,  3.31900000e+00,  3.64300000e-01,
        1.18480296e+00,  2.20874210e+00,  3.73316324e+00,  5.61216719e+00,
        6.89519583e+00,  5.82409515e+00,  2.19663441e+00, -1.08712663e-02,
       -4.28969670e-01, -8.03166571e-01, -1.36745981e+00, -2.11525239e+00,
       -2.78571299e+00, -2.89453423e+00, -1.83934657e+00,  1.23268730e+00,
        9.05900000e-01,  2.34598494e+00,  1.28500000e-01,  5.42241022e-01,
        1.87100000e+01,  4.13300000e+00,  1.20000000e+00,  4.47572721e+00,
        4.19627876e+00,  2.98800046e+00,  3.82700000e-01,  8.78127282e-01,
        1.20900000e-01,  2.07977938e-01,  1.09700000e+00,  3.06825171e+00,
        3.18000000e-01,  3.51379844e-01,  7.61000000e-01,  1.06690522e+00,
        3.38700000e+01,  5.09500000e+00,  1.15900000e+00,  9.04334519e-01,
        1.63100455e+00,  2.40491525e+00,  3.25800000e-01,  1.08950276e+00,
        1.02700000e-01,  4.58345379e-01,  1.40700000e+00,  4.47045795e+00,
        3.88000000e-01,  8.93354953e-01,  1.05700000e+00,  2.87515071e+00,
        3.92833000e+03,  5.93889000e+02,  1.20185000e+02,  2.95140000e+01,
        1.84422000e+01,  7.47571000e+00,  1.95136000e+00,  9.52258000e-01,
        6.26280000e-02,  1.95447096e-01,  2.86471334e-01,  2.61904714e-01,
       -1.79162826e+00,  5.53828885e+00, -8.53765986e+00,  3.65829653e+00,
        1.16205338e+00,  4.36120040e-04,  1.15157992e-01,  1.92738801e-01,
        1.19160884e-01, -7.44777568e-01,  2.76502943e+00, -4.99970939e+00,
        2.97638190e+00,  1.38478118e+00, -7.84609411e-02,  2.87968000e-01,
        9.93169095e-01,  1.36396000e-01,  5.67043335e-01,  7.64000000e-02,
        3.67142823e-01,  2.10471000e+02,  1.61414000e+01,  9.82530000e+00,
        2.75267000e+00,  1.42148000e+00,  7.16246000e-01,  3.20205000e-01,
        1.35088000e-01,  5.51300000e-02,  6.17417078e-01,  7.54197063e+00,
       -1.40545342e+01,  5.00284721e+00,  2.26717640e+00,  3.20244682e-01,
        8.41060785e-03,  6.66591159e-05, -3.89663185e-07, -2.38547513e-01,
       -2.05394939e+00,  4.09336307e+00, -1.80630447e+00, -8.33856827e-01,
       -1.02787092e-01,  2.51785595e-01,  1.35792984e-01,  1.85746989e-02,
        4.33200000e-01,  1.02528582e+00,  7.37200000e-02,  1.12063982e-01,
        1.35775000e+02,  3.87746000e+01,  1.34922000e+01,  5.08327000e+00,
        2.78958000e+00,  1.46159000e+00,  7.40845000e-01,  5.65164981e+00,
        4.99641285e+00, -2.97576469e+00,  5.44983423e+00,  5.28571275e+00,
        2.05485195e+00,  4.24197614e-01,  3.53130000e-01,  4.22099620e-01,
        1.39300000e-01,  8.28788736e-02,  3.24400000e-01,  1.56654280e-01,
        1.63308650e+01,  8.55654200e+00,  2.81071581e+02,  6.17166040e+01,
        1.44703370e+01,  1.38161940e+01,  8.42492400e+00,  8.09272800e+00,
        6.74573800e+01,  1.34933503e+02,  1.47163440e+01,  2.95185120e+01,
        1.51463190e+01,  1.48863310e+01,  5.90826700e+00,  5.59432200e+00,
        5.31434660e+01,  3.54478150e+01,  9.17922300e+00,  1.32402530e+01,
        1.44492950e+01,  1.44449780e+01, -2.02961380e+01, -1.53668010e+01
    ];
    let ecpbas = vec![
        [  0,   0,   2,   2,   0, 236, 238,   0],
        [  0,   1,   4,   2,   0, 240, 244,   0],
        [  0,   2,   4,   2,   0, 248, 252,   0],
        [  0,   3,   2,   2,   0, 256, 258,   0],
        [  1,   0,   2,   2,   0, 236, 238,   0],
        [  1,   1,   4,   2,   0, 240, 244,   0],
        [  1,   2,   4,   2,   0, 248, 252,   0],
        [  1,   3,   2,   2,   0, 256, 258,   0],
    ];

    CInt { atm, bas, ecpbas, env, cint_type: Spheric }
}
