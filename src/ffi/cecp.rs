use core::ffi::{c_int, c_ulong};

/* automatically generated by rust-bindgen 0.71.1 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub const RADI_POWER: u32 = 3;
pub const SO_TYPE_OF: u32 = 4;
pub const ECP_LMAX: u32 = 5;
pub const SIM_ZERO: f64 = 0.00000000000000000000000000000000000000000000000001;
pub const EXPCUTOFF: u32 = 39;
pub const CUTOFF: u32 = 460;
pub const CART_CUM: u32 = 456;
pub const K_TAYLOR_MAX: u32 = 7;
pub const K_TAB_COL: u32 = 24;
pub const K_TAB_ENTRIES: u32 = 400;
pub const K_TAB_INTERVAL: f64 = 0.04;
pub const AS_RINV_ORIG_ATOM: u32 = 17;
pub const AS_ECPBAS_OFFSET: u32 = 18;
pub const AS_NECPBAS: u32 = 19;
pub const LEVEL0: u32 = 5;
pub const LEVEL_MAX: u32 = 11;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ECPOpt {
    pub u_ecp: *mut f64,
}
unsafe extern "C" {
    pub fn NPdset0(p: *mut f64, n: c_ulong);
    pub fn ECPdel_optimizer(opt: *mut *mut ECPOpt);
    pub fn ECPscalar_sph(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_cart(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_optimizer(
        opt: *mut *mut ECPOpt,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
    );
    pub fn ECPso_sph(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPso_cart(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPso_spinor(
        out: *mut __BindgenComplex<f64>,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ignuc_sph(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ignuc_cart(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ignuc_optimizer(
        opt: *mut *mut ECPOpt,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
    );
    pub fn ECPscalar_ipnuc_sph(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ipnuc_cart(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ipnuc_optimizer(
        opt: *mut *mut ECPOpt,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
    );
    pub fn ECPscalar_ipipnuc_sph(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ipipnuc_cart(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ipipnuc_optimizer(
        opt: *mut *mut ECPOpt,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
    );
    pub fn ECPscalar_ipnucip_sph(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ipnucip_cart(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ipnucip_optimizer(
        opt: *mut *mut ECPOpt,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
    );
    pub fn ECPscalar_iprinv_sph(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_iprinv_cart(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_iprinv_optimizer(
        opt: *mut *mut ECPOpt,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
    );
    pub fn ECPscalar_ipiprinv_sph(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ipiprinv_cart(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_ipiprinv_optimizer(
        opt: *mut *mut ECPOpt,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
    );
    pub fn ECPscalar_iprinvip_sph(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_iprinvip_cart(
        out: *mut f64,
        dims: *const c_int,
        shls: *const c_int,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
        opt: *const ECPOpt,
        cache: *mut f64,
    ) -> c_int;
    pub fn ECPscalar_iprinvip_optimizer(
        opt: *mut *mut ECPOpt,
        atm: *const c_int,
        natm: c_int,
        bas: *const c_int,
        nbas: c_int,
        env: *const f64,
    );
}
